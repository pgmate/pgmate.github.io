"use strict";(self.webpackChunkpgmate=self.webpackChunkpgmate||[]).push([[827],{97:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>a,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"keyboard-shortcuts","title":"\u2328\ufe0f Keyboard Shortcuts","description":"I love keyboard shortcuts and I love the way VSCode provides a hybrid experience through the Command Palette.","source":"@site/docs/keyboard-shortcuts.mdx","sourceDirName":".","slug":"/keyboard-shortcuts","permalink":"/docs/keyboard-shortcuts","draft":false,"unlisted":false,"editUrl":"https://github.com/pgmate/pgmate.github.io/tree/main/docs/keyboard-shortcuts.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\ud83e\udd16 Copilot","permalink":"/docs/copilot"},"next":{"title":"\u2328\ufe0f SQL Studio","permalink":"/docs/sql-studio"}}');var i=n(4848),d=n(8453);const r={},o="\u2328\ufe0f Keyboard Shortcuts",l={},c=[{value:"Command Palette",id:"command-palette",level:2},{value:"Snippets Palette",id:"snippets-palette",level:2},{value:"Global Shortcuts",id:"global-shortcuts",level:2},{value:"Contextual Shortcuts",id:"contextual-shortcuts",level:2},{value:"Connection Shortcuts",id:"connection-shortcuts",level:3},{value:"Table Mode",id:"table-mode",level:3},{value:"SQL Studio",id:"sql-studio",level:3},{value:"Copilot",id:"copilot",level:3},{value:"Running Commands",id:"running-commands",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"\ufe0f-keyboard-shortcuts",children:"\u2328\ufe0f Keyboard Shortcuts"})}),"\n",(0,i.jsxs)(t.p,{children:["I love keyboard shortcuts and I love the way VSCode provides a hybrid experience through the ",(0,i.jsx)(t.code,{children:"Command Palette"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"So basically that is the User Experience that PGMate aims for, but there is nothing released yet."}),"\n",(0,i.jsx)(t.p,{children:"This page is about what I DREAM TO RELEASE."}),"\n",(0,i.jsx)(t.h2,{id:"command-palette",children:"Command Palette"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"Shift + Cmd + p"})," (same as VSCode) will bring up the Command Palette where you will be able to filter out registered command until you find what you want and simply hit Enter."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"#running-commands",children:"Running commands is describle below"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"snippets-palette",children:"Snippets Palette"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"Cmd + p"})," (same as VSCode) will let you open a SQL file in the SQL Studio or a Configurable Code Snippet."]}),"\n",(0,i.jsxs)(t.p,{children:["In both cases I envision a ",(0,i.jsx)(t.code,{children:"Enter"})," on the selected line to trigger the main action (open the SQL file or the snippet), and a ",(0,i.jsx)(t.code,{children:"Shift + Enter"})," to trigger the secondary action (open & execute the SQL file, or execute the Snippet)."]}),"\n",(0,i.jsx)(t.h2,{id:"global-shortcuts",children:"Global Shortcuts"}),"\n",(0,i.jsx)(t.p,{children:"Same as in VSCode, there will be globally available shortcuts.\nThat's what I have in mind:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"combo"}),(0,i.jsx)(t.th,{children:"description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Cmd + ?"}),(0,i.jsx)(t.td,{children:"open Copilot"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Cmd + ?"}),(0,i.jsx)(t.td,{children:"open Steward (*)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Cmd + ?"}),(0,i.jsx)(t.td,{children:"open SQL Studio"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Opt + Cmd + Left/Right"}),(0,i.jsx)(t.td,{children:"move left right in tabs"})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"(*) Steward is an inline (popup/sidebar) non-persisted Copilot session that can fetch context from the UI underneath. I still have no clue how to do this, but it would be a nice to have."}),"\n",(0,i.jsx)(t.h2,{id:"contextual-shortcuts",children:"Contextual Shortcuts"}),"\n",(0,i.jsx)(t.p,{children:"Contextual shortcuts are active only when a certain condition is true. This could be data from a context (need to implement a global one?) or path matching."}),"\n",(0,i.jsx)(t.p,{children:"It could also be signal-based like keeping a feature-flag map that is fueled by events. When a particular component mounts/unmounts it could activate/deactivate shortcuts."}),"\n",(0,i.jsx)(t.h3,{id:"connection-shortcuts",children:"Connection Shortcuts"}),"\n",(0,i.jsx)(t.p,{children:"These make sense only if a connection is active or even in more specific scenario."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"combo"}),(0,i.jsx)(t.th,{children:"description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Cmd + ?"}),(0,i.jsx)(t.td,{children:"Go to Home Page"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Cmd + ?"}),(0,i.jsx)(t.td,{children:"Go to Connection Page"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Cmd + ?"}),(0,i.jsx)(t.td,{children:"Go to Database Page"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Cmd + ?"}),(0,i.jsx)(t.td,{children:"Go to Schema Page"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Opt + Cmd + Up/Down"}),(0,i.jsx)(t.td,{children:"move next/prev table in the schema when in table mode"})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"Examples of complex cases:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:'moving to the "schema page" can be achieved from a table\'s view but not from the Connection'}),"\n",(0,i.jsxs)(t.li,{children:["moving up/down ",(0,i.jsx)(t.strong,{children:"from a table view"})," should move to prev/next table"]}),"\n",(0,i.jsxs)(t.li,{children:["moving up/down ",(0,i.jsx)(t.strong,{children:"from a schema view"})," should move to prev/next schema"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"table-mode",children:"Table Mode"}),"\n",(0,i.jsx)(t.p,{children:"These are only active if a table is focused in the sidebar."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"combo"}),(0,i.jsx)(t.th,{children:"description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Cmd + ?"}),(0,i.jsx)(t.td,{children:"table: data view"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Cmd + ?"}),(0,i.jsx)(t.td,{children:"table: info view"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Cmd + ?"}),(0,i.jsx)(t.td,{children:"table: structure view"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Cmd + ?"}),(0,i.jsx)(t.td,{children:"tabls: DLL view"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"sql-studio",children:"SQL Studio"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"combo"}),(0,i.jsx)(t.th,{children:"description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Cmd + Enter"}),(0,i.jsx)(t.td,{children:"run selection / cursor target"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Shift + Cmd + Enter"}),(0,i.jsx)(t.td,{children:"run all code"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"copilot",children:"Copilot"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"combo"}),(0,i.jsx)(t.th,{children:"description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Enter"}),(0,i.jsx)(t.td,{children:"Send the message"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Shift + Enter"}),(0,i.jsx)(t.td,{children:"new line in chat"})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"running-commands",children:"Running Commands"}),"\n",(0,i.jsx)(t.p,{children:"Commands in PGMate need to be configuration-driven. I haven't yet spent time researching a read-to-use approach (although I hope to be able to use something from the VSCode ecosystem), but it's failrily easy to assume that they need to be declarative configuration associated with implementors so that it is possible to handle these scenarios:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"plugins / extension must be able to register new commands"}),"\n",(0,i.jsx)(t.li,{children:"user configuration can override shortcuts, command names and search paths to the user's liking"}),"\n",(0,i.jsx)(t.li,{children:"command input UI is standardized"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"I really really wish I'm not going to build this myself because it is not core to PGMate, although keyboard navigation is still a paramount user interface to me."})]})}function a(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(6540);const i={},d=s.createContext(i);function r(e){const t=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(d.Provider,{value:t},e.children)}}}]);